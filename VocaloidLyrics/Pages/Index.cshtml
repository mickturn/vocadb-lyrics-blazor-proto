@page "/"
@inject HttpClient Http

<h1>VocaDB lyrics display</h1>

<div class="row">
	<form class="form-horizontal col-sm-6">
		<div class="input-group">
			<!-- Note 0.4.0: currently bind and onchange are not supported on the same element: https://github.com/aspnet/Blazor/issues/433#issue-309782114, https://github.com/aspnet/Blazor/issues/610 -->
			<!-- Note 0.4.0: button inside form will always submit form: https://github.com/aspnet/Blazor/issues/988 -->
			<input type="text" class="form-control" placeholder="Song" bind="@songUrl" />
			<span class="input-group-btn">
				<button class="btn btn-default" type="button" onclick="@(() => GetSongAsync(songUrl))">Get</button>
			</span>
		</div>
		<p class="help-block">Enter song URL or name, for example 
			<a href="" onclick="@(() => songUrl = "https://youtu.be/hoLu7c2XZYU")">https://youtu.be/hoLu7c2XZYU</a>
			or 
			<a href="" onclick="@(() => songUrl = "Nebula")">Nebula</a>
		</p>
	</form>
</div>

@if (song != null) {
	<h2>Lyrics for song <a href="https://vocadb.net/S/@song.Id">@song.Name</a> by @song.ArtistString</h2>
	@if (!song.Lyrics.Any()) {
		<div class="alert alert-warning">
			No lyrics! Try another song.
		</div>
	}
	<ul class="nav nav-tabs">
		@foreach (var lyrics in song.Lyrics) {
			<li class="nav-item @((lyrics == activeLyrics ? "active" :""))">
				<a class="nav-link" href="" onclick="@(() => activeLyrics = lyrics)">
					@GetLyricsTitle(lyrics)
				</a>
			</li>
		}
	</ul>
	@if (activeLyrics != null) {
		<div style="white-space: pre-line;">
			@activeLyrics.Value
		</div>
	}
}

@functions {

	VocaDbContracts.SongForApiContract song;
	VocaDbContracts.LyricsForSongContract activeLyrics;
	string songUrl = null;

	private void Log(object val) {
		Console.WriteLine(val);
	}

	string GetLyricsTitle(VocaDbContracts.LyricsForSongContract lyrics) {
		if (!string.IsNullOrEmpty(lyrics.CultureCode)) {
			return new System.Globalization.CultureInfo(lyrics.CultureCode).EnglishName;
		}

		var translationType = (VocaDbContracts.TranslationType)Enum.Parse(typeof(VocaDbContracts.TranslationType), lyrics.TranslationType);

		switch (translationType) {
			case VocaDbContracts.TranslationType.Romanized:
				return "Romanized";
			case VocaDbContracts.TranslationType.Original:
				return "Original";
			case VocaDbContracts.TranslationType.Translation:
				return "Translation";
			default:
				return "Unspecified";
		}

	}

	async Task GetSongAsync(string input) {

		Log(input);

		if (string.IsNullOrEmpty(input)) {
			song = null;
			return;
		}

		var url = "https://vocadb.net/api/songs?maxResults=1&nameMatchMode=Auto&preferAccurateMatches=true&fields=Lyrics&sort=RatingScore&lang=English&query=" + input;
		var result = await Http.GetJsonAsync<VocaDbContracts.PartialFindResult<VocaDbContracts.SongForApiContract>>(url);
		this.song = result.Items.FirstOrDefault();
		if (song != null && song.Lyrics.Any()) {
			this.activeLyrics = song.Lyrics.FirstOrDefault();
		} else {
			this.activeLyrics = null;
		}

	}

}